{"version":3,"sources":["text.js","App.js","registerServiceWorker.js","index.js"],"names":["initialText","value","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","handleChange","bind","assertThisInitialized","event","document","getElementById","innerHTML","marked","target","setState","rawMarkup","sanitize","__html","react_default","a","createElement","style","appStyle","headingStyle","columnStyle","onChange","textareaStyle","id","dangerouslySetInnerHTML","Component","display","width","margin","margin-top","height","padding","text-align","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","ReactDOM","render","src_App","URL","process","origin","addEventListener","concat","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"uOAIeA,EAJG,CAChBC,MAAO,qeCGHC,cACJ,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQX,EACbI,EAAKQ,aAAeR,EAAKQ,aAAaC,KAAlBR,OAAAS,EAAA,EAAAT,CAAAD,IAHHA,4EAMNW,GACXC,SAASC,eAAe,UAAUC,UAAYC,IAAOJ,EAAMK,OAAOnB,OAClEM,KAAKc,SAAS,CAACpB,MAAOc,EAAMK,OAAOnB,0CAG3BA,GACR,IAAIqB,EAAYH,IAAOlB,EAAO,CAACsB,UAAU,IACzC,MAAO,CAAEC,OAAQF,oCAIjB,OACEG,EAAAC,EAAAC,cAAA,OAAKC,MAAOC,GACVJ,EAAAC,EAAAC,cAAA,MAAIC,MAAOE,GAAX,sBACAL,EAAAC,EAAAC,cAAA,OAAKC,MAAOG,GACVN,EAAAC,EAAAC,cAAA,YAAU1B,MAAOM,KAAKI,MAAMV,MAAO+B,SAAUzB,KAAKK,aAAcgB,MAAOK,KAEzER,EAAAC,EAAAC,cAAA,OAAKO,GAAG,SAASN,MAAOG,EAAaI,wBAAyB5B,KAAKe,UAAUf,KAAKI,MAAMV,iBAxB9EmC,aA8BZP,EAAW,CACfQ,QAAW,QAGPN,EAAc,CAClBO,MAAS,MACTC,OAAU,QAGNN,EAAgB,CACpBO,aAAc,OACdF,MAAS,OACTG,OAAU,QACVC,QAAW,QAGPZ,EAAe,CACnBa,aAAc,UAGDzC,IC5CT0C,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DA6BN,SAASC,EAAgBC,GACvBC,UAAUC,cACPC,SAASH,GACTI,KAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACtCD,EAAiBE,cAAgB,WACA,cAA3BF,EAAiB/C,QACfyC,UAAUC,cAAcQ,WAK1BC,QAAQC,IAAI,6CAKZD,QAAQC,IAAI,2CAMrBC,MAAM,SAAAC,GACLH,QAAQG,MAAM,4CAA6CA,KChEjEC,IAASC,OAAO1C,EAAAC,EAAAC,cAACyC,EAAD,MAASpD,SAASC,eAAe,SDclC,WACb,GAA6C,kBAAmBmC,UAAW,CAGzE,GADkB,IAAIiB,IAAIC,sBAAwBxB,OAAOC,UAC3CwB,SAAWzB,OAAOC,SAASwB,OAIvC,OAGFzB,OAAO0B,iBAAiB,OAAQ,WAC9B,IAAMrB,EAAK,GAAAsB,OAAMH,sBAAN,sBAEN1B,EAwCX,SAAiCO,GAE/BuB,MAAMvB,GACHI,KAAK,SAAAoB,GAGkB,MAApBA,EAASC,SACuD,IAAhED,EAASE,QAAQC,IAAI,gBAAgBC,QAAQ,cAG7C3B,UAAUC,cAAc2B,MAAMzB,KAAK,SAAAC,GACjCA,EAAayB,aAAa1B,KAAK,WAC7BT,OAAOC,SAASmC,aAKpBhC,EAAgBC,KAGnBa,MAAM,WACLF,QAAQC,IACN,mEAzDAoB,CAAwBhC,GAHxBD,EAAgBC,MC7BxBiC","file":"static/js/main.b4c9a607.chunk.js","sourcesContent":["var initialText = {\n  value: 'Heading\\n=======\\n\\nSub-heading\\n-----------\\n \\n### Another deeper heading\\n \\nParagraphs are separated\\nby a blank line.\\n\\nLeave 2 spaces at the end of a line to do a  \\nline break\\n\\nText attributes *italic*, **bold**, \\n`monospace`, ~~strikethrough~~ .\\n\\nShopping list:\\n\\n  * apples\\n  * oranges\\n  * pears\\n\\nNumbered list:\\n\\n  1. apples\\n  2. oranges\\n  3. pears\\n\\nThe rain---not the reign---in\\nSpain!\\n\\n *[Michael Ignacio\\'s Github](https://github.com/michaelignacio)*'\n}\n\nexport default initialText;","import React, { Component } from 'react';\nimport marked from 'marked';\nimport initialText from './text.js';\n\nclass App extends Component {\n  constructor(props) {\n    super(props)\n    this.state = initialText;\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  handleChange(event) {\n    document.getElementById('output').innerHTML = marked(event.target.value);\n    this.setState({value: event.target.value});\n  }\n\n  rawMarkup(value) {\n    var rawMarkup = marked(value, {sanitize: true});\n    return { __html: rawMarkup };\n  }\n\n  render() {\n    return (\n      <div style={appStyle}>\n        <h1 style={headingStyle}>Markdown Previewer</h1>\n        <div style={columnStyle}>\n          <textarea value={this.state.value} onChange={this.handleChange} style={textareaStyle} />\n        </div>\n        <div id='output' style={columnStyle} dangerouslySetInnerHTML={this.rawMarkup(this.state.value)}></div>\n     </div>\n    );\n  }\n}\n\nconst appStyle = {\n  'display': 'flex'\n}\n\nconst columnStyle = {\n  'width': '50%',\n  'margin': '20px'\n}\n\nconst textareaStyle = {\n  'margin-top': '20px',\n  'width': '100%',\n  'height': '550px',\n  'padding': '10px'\n}\n\nconst headingStyle = {\n  'text-align': 'center'\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (!isLocalhost) {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      } else {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}